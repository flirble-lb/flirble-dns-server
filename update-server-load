#!/usr/bin/env python
# Update the server load value

import os, logging
log = logging.getLogger(os.path.basename(__file__))

import argparse, sys, json, socket, time
import rethinkdb as r

# Get the first component of the hostname
host =  socket.gethostname().split(".")[0]

# Defaults for the command line options.
DEBUG = False
LOGFILE = None
LOGLEVEL = "info"
PIDFILE = "/var/run/fdns-load-monitor-%s.pid" % host

RETHINKDB_HOST = "localhost"
RETHINKDB_PORT = "28015"
RETHINKDB_NAME = "flirble_dns"
RETHINKDB_SERVERS = "servers"

GROUP = None
NAME = host
LOAD = None
STATIC = False


# Build the command line parser
parser = argparse.ArgumentParser(description="Update server load value for Flirble DNS Server")
main = parser.add_argument_group("Main options")
main.add_argument("-d", "--debug", default=DEBUG, action="store_true", help="Print extra diagnostic data. Implies --foreground and --log-level=debug. [%s]" % str(DEBUG))
main.add_argument("--log-file", metavar="filename", default=LOGFILE, help="File to send logging output to; leave blank to use stderr. [%s]" % "stderr" if LOGFILE is None else LOGFILE)
main.add_argument("--log-level", default=LOGLEVEL, choices=["debug", "info", "warning", "error", "critical"], help="Logging level. [%s]" % LOGLEVEL.lower())
main.add_argument("--pid-file", metavar="filename", default=PIDFILE, help="File to store the PID value in when daemonized. [%s]" % PIDFILE)

load = parser.add_argument_group("Server load options")
load.add_argument("-g", "--group", metavar="server_group", required=True, default=GROUP, help="Server group name. Mandatory. [%s]" % "none" if GROUP is None else GROUP)
load.add_argument("-n", "--name", metavar="string", required=True, default=NAME, help="The server host name. Mandatory. [%s]" % NAME)
load.add_argument("-l", "--load", metavar="float", type=float, required=True, default=LOAD, help="Server load. Server is considered unavailable if this value is negative. Mandatory. [%s]" % "none" if GROUP is None else str(GROUP))
load.add_argument("-s", "--static", default=STATIC, action="store_true", help="Make this host a static entry. If not specified the host will revert to having a timer. [%s]" % "False" if STATIC == False else "True")

db = parser.add_argument_group("RethinkDB options")
db.add_argument("--rethinkdb-host", metavar="name", default=RETHINKDB_HOST, help="Connection host for RethinkDB server. [%s]" % RETHINKDB_HOST)
db.add_argument("--rethinkdb-port", metavar="name", default=RETHINKDB_PORT, help="Connection port for RethinkDB server. [%s]" % RETHINKDB_PORT)
db.add_argument("--rethinkdb-name", metavar="string", default=RETHINKDB_NAME, help="RethinkDB database name. [%s]" % RETHINKDB_NAME)
db.add_argument("--rethinkdb-servers", metavar="table", default=RETHINKDB_SERVERS, help="Servers table name. [%s]" % RETHINKDB_SERVERS)

# Run the command line parser
args = parser.parse_args()

if args.debug:
    args.log_level = "debug"

if str(args.log_file) == "":
    args.log_file = None

# Setup logging
logging.basicConfig(filename=args.log_file,
    level=getattr(logging, args.log_level.upper(), None))

# Connect
conn = r.connect(host=args.rethinkdb_host, port=args.rethinkdb_port,
    db=args.rethinkdb_name)

# First check the group and server values are valid
key = "%s!%s" % (args.group, args.name)
value = r.table(args.rethinkdb_servers).get(key).run(conn)

if value is None:
    log.error("No server in group '%s' with name '%s' exists." %
        (args.group, args.name))
    conn.close()
    sys.exit(1)

# Update the load value
if 'load' in value:
    log.info("Old load: '%.3f'. New load: '%.3f'." %
        (value['load'], args.load))
else:
    log.info("Old load: 'none'. New load: '%.3f'." % args.load)

# And update the DB
update = {
    'load': args.load,
    'ts': time.time() if args.static == False else -1.0
}
r.table(args.rethinkdb_servers).get(key).update(update).run(conn)

# All done
conn.close()
