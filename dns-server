#!/usr/bin/env python
# Flirble DNS Server

import os, logging
log = logging.getLogger(os.path.basename(__file__))

import argparse, sys, os, socket, traceback
import daemon, lockfile.pidlockfile
import FlirbleDNSServer as fdns

# Defaults for the command line options.
FOREGROUND = False
DEBUG = fdns.debug
LOGFILE = None
LOGLEVEL = "info"
PIDFILE = "/var/run/flirble-dns-server.pid"
MAXTHREADS = 128
HOSTNAME = socket.gethostname()

ADDRESS = '::'
PORT = 8053
AUTHTOKEN = ""
SSLCERT = None

GEODB = "/usr/local/share/GeoIP/GeoLite2-City.mmdb"

RETHINKDB_HOST = "localhost:28015"
RETHINKDB_NAME = "flirble_dns"
ZONES = "zones"
SERVERS = "servers"

# Build the command line parser
parser = argparse.ArgumentParser(description="Flirble DNS Server version %s." % fdns.version)
main = parser.add_argument_group("Main options")
main.add_argument("-f", "--foreground", default=FOREGROUND, action="store_true", help="Don't daemonize, stay in the foreground. [%s]" % str(FOREGROUND))
main.add_argument("-d", "--debug", default=DEBUG, action="store_true", help="Print extra diagnostic data. Implies --foreground and --log-level=debug. [%s]" % str(DEBUG))
main.add_argument("--log-file", metavar="filename", default=LOGFILE, help="File to send logging output to; leave blank to use syslog. [%s]" % ("syslog" if LOGFILE is None else LOGFILE))
main.add_argument("--log-level", default=LOGLEVEL, choices=["debug", "info", "warning", "error", "critical"], help="Logging level. [%s]" % LOGLEVEL.lower())
main.add_argument("--pid-file", metavar="filename", default=PIDFILE, help="File to store the PID value in when daemonized. [%s]" % PIDFILE)
main.add_argument("--max-threads", metavar="number", type=int, default=MAXTHREADS, help="Maximum number of DNS request handler threads to run concurrently. [%s]" % MAXTHREADS)
main.add_argument("--hostname", metavar="string", default=HOSTNAME, help="The local host name. [%s]" % HOSTNAME)

network = parser.add_argument_group("Network options")
network.add_argument("--address", metavar="ip-address", default=ADDRESS, help="IP address to bind to for DNS queries. The default binds to the wildcard for both IPv4 and IPv6. [%s]" % ADDRESS)
network.add_argument("--port", metavar="number", default=PORT, type=int, help="TCP and UDP port number to listen for DNS queries on. [%d]" % PORT)

geoip = parser.add_argument_group("GeoIP options")
geoip.add_argument("--geodb", metavar="filename", default=GEODB, help="GeoIP City database file to use. [%s]" % GEODB)

db = parser.add_argument_group("RethinkDB options")
db.add_argument("--rethinkdb-host", metavar="name[:port]", default=RETHINKDB_HOST, help="Connection details for RethinkDB server, eg 'localhost:28015'. [%s]" % ("none" if RETHINKDB_HOST is None else RETHINKDB_HOST))
db.add_argument("--rethinkdb-name", metavar="string", default=RETHINKDB_NAME, help="RethinkDB database name. [%s]" % RETHINKDB_NAME)
db.add_argument("--auth-token", metavar="token", default=AUTHTOKEN, help="If provided, this sends an authentication token when connecting to the database. [%s]" % AUTHTOKEN)
db.add_argument("--ssl-cert", metavar="filename", default=SSLCERT, help="Enable SSL on the connection by providing a path to the CA certificate to authenticate the server against; SSL will not be used if blank. [%s]" % SSLCERT)
db.add_argument("--zones", metavar="table", default=ZONES, help="Zones table name. [%s]" % ZONES)
db.add_argument("--servers", metavar="table", default=SERVERS, help="Servers table name. [%s]" % SERVERS)

# Run the command line parser
args = parser.parse_args()

# Handle debug mode
fdns.debug = args.debug
if fdns.debug:
    args.log_level = "debug"
    args.foreground = True

# Setup logging
logging.basicConfig(filename=args.log_file,
    level=getattr(logging, args.log_level.upper(), None))

# If we have no log file name and we're not in diagnostic mode, use syslog
if str(args.log_file) == "": args.log_file = None
if args.log_file is None and args.foreground is False:
    # Use a syslog handler for logging
    import platform, logging.handlers

    # remove existing handlers
    while len(log.root.handlers):
        log.root.removeHandler(log.root.handlers[0])

    # work out the path to the syslog socket
    path = None
    for p in ("/dev/log", "/var/run/syslog"):
        if os.path.exists(p):
            path = p
            break

    if path is None:
        raise Exception("Unable to discover path to the syslog socket")

    # create a syslog handler
    h = logging.handlers.SysLogHandler(address=path)

    if hasattr(platform, 'mac_ver'):
        # bit of a hack for macos which filters info and below by default,
        # and logging doesn't have a 'notice' level.
        h.priority_map['INFO'] = 'notice'
        if args.log_level.upper() == 'DEBUG':
            h.priority_map['DEBUG'] = 'notice'

    # add the syslog handler
    log.root.addHandler(h)

# Initialize and connect RethinkDB
rdb = None
if args.rethinkdb_host is not None:
    if args.ssl_cert is None:
        args.ssl_cert = {}
    else:
        if not os.path.isfile(args.ssl_cert):
            log.error("SSL CA certificate file '%s' does not exist." %
                args.ssl_cert)

        args.ssl_cert = {
            "ca_certs": args.ssl_cert
        }

    log.info("Connecting to RethinkDB at '%s'" % args.rethinkdb_host)

    rdb = fdns.Data(remote=args.rethinkdb_host, name=args.rethinkdb_name,
        auth=args.auth_token, ssl=args.ssl_cert)
    if rdb == False or rdb.start() == False:
        raise Exception("Cannot start DNS server: %s" %
            "Failed to connect to RethinkDB")

# Set the maxthreads value
fdns.MAXIMUM_HANDLER_THREADS = args.max_threads

# We should be good to go by here!
log.info("Starting DNS server on '%s' port '%d'." % (args.address, args.port))

# If we're not going to stay in the foreground, daemonize.
if args.foreground is False:
    # discover file handles to preserve
    preserve_files = []
    for h in log.root.handlers:
        if hasattr(h, 'stream'):
            preserve_files.append(h.stream)
        if hasattr(h, 'socket'):
            preserve_files.append(h.socket)

    # extract the socket from rethinkdb
    # NB: uses private attributes :(
    if rdb.r._instance is not None:
        if hasattr(rdb.r._instance, '_socket'):
            s = rdb.r._instance._socket
            preserve_files.append(s)

    # create the daemon context
    ctx = daemon.DaemonContext()
    ctx.umask = 0o027
    ctx.pidfile = lockfile.pidlockfile.PIDLockFile(args.pid_file)
    ctx.preserve_files = preserve_files

    # daemonize
    ctx.open()

# And now do some real work
try:
    # Fire it all up!
    server = fdns.Server(rdb, args.address, args.port, args.zones,
        args.servers, args.geodb)
    server.run()
except Exception as e:
    log.error("Exception when running the DNS server:\n%s." % e.message)
    log.debug("%s." % traceback.format_exc())

# All done!
log.info("Exiting normally.")
